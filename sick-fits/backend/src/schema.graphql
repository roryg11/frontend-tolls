# import * from "./generated/prisma.graphql"
type SuccessMessage {
    message: String
}

type Mutation {
    createItem(title: String, description: String, price: Int, image: String, largeImage: String): Item!
    updateItem(id: ID!, title: String, description: String, price: Int): Item!
    deleteItem(id: ID!): Item
    signup(email: String!, password: String!, name: String!): User!
    signin(email: String!, password: String!): User
    signout: SuccessMessage
    requestReset(email: String!): SuccessMessage
    resetPassword(resetToken: String!, password: String!, passwordConfirmation: String!): User!
    updatePermissions(permissions: [Permission]!, userId: ID!): User!
    addToCart(id: ID!): CartItem!
    removeFromCart(id: ID!): CartItem
    createOrder(token: String!): Order!
    createGoal(name: String, description: String, measurement: Measurement ): Goal!
    updateGoal(id: ID!, name: String, description: String, measurement: Measurement): Goal!
    deleteGoal(id: ID!): Goal
    createTask(name: String, description: String, goalId: ID!): Task!
    updateTask(id: ID!, name: String, description: String, complete: Boolean, dueDate: DateTime): Task!
    deleteTask(id: ID!): Task
    createSubTask(name: String!, description: String, taskId: ID!, dueDate: DateTime): SubTask!
    updateSubTask(id: ID!, complete: Boolean, completedAt: DateTime): SubTask!
    deleteSubTask(id: ID!): SubTask
}

type Query {
    items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, first: Int): [Item]!
    item(where: ItemWhereUniqueInput!): Item
    itemsConnection: ItemConnection!
    me: User
    users: [User]!
    order(id: ID!): Order
    orders: [Order]!
    goals: [Goal]!
    goal(id: ID!): Goal
    task(id: ID!): Task
    subTask(id: ID!): SubTask
}

type User {
    id: ID!
    email: String!
    name: String!
    permissions: [Permission!]!
    cart: [CartItem!]!
    orders: [OrderItem]
    goals: [Goal]!
}